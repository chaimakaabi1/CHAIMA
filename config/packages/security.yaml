security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\Admin:
            algorithm: plaintext

        App\Entity\Student:
            algorithm: plaintext

        App\Entity\Instructor:
            algorithm: plaintext

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_admin_provider:
            entity:
                class: App\Entity\Admin
                property: email


        app_student_provider:
            entity:
                class: App\Entity\Student
                property: email

        app_instructor_provider:
            entity:
                class: App\Entity\Instructor
                property: email

        app_users:
            chain:
                providers: [ 'app_admin_provider', 'app_instructor_provider','app_student_provider' ]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_users
            custom_authenticator: App\Security\AppCustomAuthenticator
            logout:
                path: app_logout
            # ... Other admin firewall configuration ...





            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin/dashboard, roles: ROLE_ADMIN }
        - { path: ^/instructor, roles: ROLE_INSTRUCTOR }
        - { path: ^/student, roles: ROLE_STUDENT }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
